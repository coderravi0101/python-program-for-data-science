1. Python Output
In [ ]:	

# Python is a case sensitive language
print('Hello World')
     
Hello World
In [ ]:	

print('salman khan')
     
salman khan
In [ ]:	

print(salman khan)
     
  File "<ipython-input-3-0713073d8d88>", line 1
    print(salman khan)
                    ^
SyntaxError: invalid syntax because salman khan is a string so print error.
In [ ]:	

print(7)
     
7
In [ ]:	

print(7.7)
     
7.7
In [ ]:	

print(True)
     
True
In [ ]:	

print('Hello',1,4.5,True)
     
Hello 1 4.5 True
In [ ]:	

print('Hello',1,4.5,True,sep='/')
     
Hello/1/4.5/True
In [ ]:	

print('hello')
print('world')
     
hello
world
In [ ]:	

print('hello',end='-')
print('world')
     
hello-world
2. Data Types
In [ ]:	

# Integer
print(8)
# 1*10^308
print(1e309)
     
8
inf
In [ ]:	

# Decimal/Float
print(8.55)
print(1.7e309)
     
8.55
inf
In [ ]:	

# Boolean
print(True)
print(False)
     
True
False
In [ ]:	

# Text/String
print('Hello World')
     
Hello World
In [ ]:	

# complex
print(5+6j)
     
(5+6j)
In [ ]:	

# List-> C-> Array
print([1,2,3,4,5])
     
[1, 2, 3, 4, 5]
In [ ]:	

# Tuple
print((1,2,3,4,5))
     
(1, 2, 3, 4, 5)
In [ ]:	

# Sets
print({1,2,3,4,5})
     
{1, 2, 3, 4, 5}
In [ ]:	

# Dictionary
print({'name':'Nitish','gender':'Male','weight':70})
     
{'name': 'Nitish', 'gender': 'Male', 'weight': 70}
In [ ]:	

# type
type([1,2,3])
     
Out[ ]:	
list
3. Variables
In [ ]:	

# Static Vs Dynamic Typing
# Static Vs Dynamic Binding
# stylish declaration techniques
     
In [ ]:	

# C/C++
name = 'nitish'
print(name)

a = 5
b = 6

print(a + b)
     
nitish
11
In [ ]:	

# Dynamic Typing
a = 5
# Static Typing
int a = 5
     
In [ ]:	

# Dynamic Binding
a = 5
print(a)
a = 'nitish'
print(a)

# Static Binding
int a = 5

     
5
nitish
In [ ]:	

a = 1
b = 2
c = 3
print(a,b,c)
     
1 2 3
In [ ]:	

a,b,c = 1,2,3
print(a,b,c)
     
1 2 3
In [ ]:	

a=b=c= 5
print(a,b,c)
     
5 5 5
Comments
In [ ]:	

# this is a comment
# second line
a = 4
b = 6 # like this
# second comment
print(a+b)
     
10
4. Keywords & Identifiers
In [ ]:	

# Keywords
     
In [ ]:	

# Identifiers
# You can't start with a digit
name1 = 'Nitish'
print(name1)
# You can use special chars -> _
_ = 'ntiish'
print(_)
# identiers can not be keyword
     
Nitish
ntiish
Temp Heading
5. User Input
In [ ]:	

# Static Vs Dynamic
input('Enter Email')
     
Enter Emailnitish@gmail.com
Out[ ]:	
'nitish@gmail.com'
In [ ]:	

# take input from users and store them in a variable
fnum = int(input('enter first number'))
snum = int(input('enter second number'))
#print(type(fnum),type(snum))
# add the 2 variables
result = fnum + snum
# print the result
print(result)
print(type(fnum))
     
enter first number56
enter second number67
123
<class 'int'>
6. Type Conversion
In [ ]:	

# Implicit Vs Explicit
print(5+5.6)
print(type(5),type(5.6))

print(4 + '4')
     
10.6
<class 'int'> <class 'float'>
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-57-72e5c45cdb6f> in <module>
      3 print(type(5),type(5.6))
      4 
----> 5 print(4 + '4')

TypeError: unsupported operand type(s) for +: 'int' and 'str'
In [ ]:	

# Explicit
# str -> int
#int(4+5j)

# int to str
str(5)

# float
float(4)
     
Out[ ]:	
4.0
7. Literals
In [ ]:	

a = 0b1010 #Binary Literals
b = 100 #Decimal Literal
c = 0o310 #Octal Literal
d = 0x12c #Hexadecimal Literal

#Float Literal
float_1 = 10.5
float_2 = 1.5e2 # 1.5 * 10^2
float_3 = 1.5e-3 # 1.5 * 10^-3

#Complex Literal
x = 3.14j

print(a, b, c, d)
print(float_1, float_2,float_3)
print(x, x.imag, x.real)
     
In [ ]:	

# binary
x = 3.14j
print(x.imag)
     
3.14
In [ ]:	

string = 'This is Python'
strings = "This is Python"
char = "C"
multiline_str = """This is a multiline string with more than one line code."""
unicode = u"\U0001f600\U0001F606\U0001F923"
raw_str = r"raw \n string"

print(string)
print(strings)
print(char)
print(multiline_str)
print(unicode)
print(raw_str)
     
This is Python
This is Python
C
This is a multiline string with more than one line code.
ðŸ˜€ðŸ˜†ðŸ¤£
raw \n string
In [ ]:	

a = True + 4
b = False + 10

print("a:", a)
print("b:", b)
     
a: 5
b: 10
In [ ]:	

k = None
a = 5
b = 6
print('Program exe')
     
Program exe
Operators in Python
Arithmetic Operators
Relational Operators
Logical Operators
Bitwise Operators
Assignment Operators
Membership Operators
In [ ]:	

# Arithmetric Operators
print(5+6)

print(5-6)

print(5*6)

print(5/2)

print(5//2)

print(5%2)

print(5**2)
     
11
-1
30
2.5
2
1
25
In [ ]:	

# Relational Operators
print(4>5)

print(4<5)

print(4>=4)

print(4<=4)

print(4==4)

print(4!=4)
     
False
True
True
True
True
False
In [ ]:	

# Logical Operators
print(1 and 0)

print(1 or 0)

print(not 1)
     
0
1
False
In [ ]:	

# Bitwise Operators

# bitwise and
print(2 & 3)

# bitwise or
print(2 | 3)

# bitwise xor
print(2 ^ 3)

print(~3)

print(4 >> 2)

print(5 << 2)
     
2
3
1
-4
1
20
In [ ]:	

# Assignment Operators

# =
# a = 2

a = 2

# a = a % 2
a %= 2

# a++ ++a

print(a)
     
4
In [ ]:	

# Membership Operators

# in/not in

print('D' not in 'Delhi')

print(1 in [2,3,4,5,6])
     
False
False
In [ ]:	

# Program - Find the sum of a 3 digit number entered by the user

number = int(input('Enter a 3 digit number'))

# 345%10 -> 5
a = number%10

number = number//10

# 34%10 -> 4
b = number % 10

number = number//10
# 3 % 10 -> 3
c = number % 10

print(a + b + c)
     
Enter a 3 digit number666
18
If-else in Python
In [ ]:	

# login program and indentation
# email -> nitish.campusx@gmail.com
# password -> 1234

email = input('enter email')
password = input('enter password')

if email == 'nitish.campusx@gmail.com' and password == '1234':
  print('Welcome')
elif email == 'nitish.campusx@gmail.com' and password != '1234':
  # tell the user
  print('Incorrect password')
  password = input('enter password again')
  if password == '1234':
    print('Welcome,finally!')
  else:
    print('beta tumse na ho paayega!')
else:
  print('Not correct')
     
enter emailsrhreh
enter passworderhetjh
Not correct
In [ ]:	

# if-else examples
# 1. Find the min of 3 given numbers
# 2. Menu Driven Program
     
first num4
second num1
third num10
smallest is 1
In [ ]:	

# menu driven calculator
menu = input("""
Hi! how can I help you.
1. Enter 1 for pin change
2. Enter 2 for balance check
3. Enter 3 for withdrawl
4. Enter 4 for exit
""")

if menu == '1':
  print('pin change')
elif menu == '2':
  print('balance')
else:
  print('exit')
     
Hi! how can I help you.
1. Enter 1 for pin change
2. Enter 2 for balance check
3. Enter 3 for withdrawl
4. Enter 4 for exit
2
balance
Modules in Python
math
keywords
random
datetime
In [ ]:	

# math
import math

math.sqrt(196)
     
Out[ ]:	
14.0
In [ ]:	

# keyword
import keyword
print(keyword.kwlist)
     
['False', 'None', 'True', 'and', 'as', 'assert', 'async', 'await', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield']
In [ ]:	

# random
import random
print(random.randint(1,100))
     
88
In [ ]:	

# datetime
import datetime
print(datetime.datetime.now())
     
2022-11-08 15:50:21.228643
In [ ]:	

help('modules')
     
Please wait a moment while I gather a list of all available modules...

/usr/local/lib/python3.7/dist-packages/caffe2/proto/__init__.py:17: UserWarning: Caffe2 support is not enabled in this PyTorch build. Please enable Caffe2 by building PyTorch from source with `BUILD_CAFFE2=1` flag.
/usr/local/lib/python3.7/dist-packages/caffe2/proto/__init__.py:17: UserWarning: Caffe2 support is not enabled in this PyTorch build. Please enable Caffe2 by building PyTorch from source with `BUILD_CAFFE2=1` flag.
/usr/local/lib/python3.7/dist-packages/caffe2/python/__init__.py:9: UserWarning: Caffe2 support is not enabled in this PyTorch build. Please enable Caffe2 by building PyTorch from source with `BUILD_CAFFE2=1` flag.
Cython              collections         kaggle              requests_oauthlib
IPython             colorcet            kanren              resampy
OpenGL              colorlover          kapre               resource
PIL                 colorsys            keras               rlcompleter
ScreenResolution    community           keras_preprocessing rmagic
__future__          compileall          keyword             rpy2
_abc                concurrent          kiwisolver          rsa
_ast                confection          korean_lunar_calendar runpy
_asyncio            configparser        langcodes           samples
_bisect             cons                lib2to3             sched
_blake2             contextlib          libfuturize         scipy
_bootlocale         contextlib2         libpasteurize       scs
_bz2                contextvars         librosa             seaborn
_cffi_backend       convertdate         lightgbm            secrets
_codecs             copy                linecache           select
_codecs_cn          copyreg             llvmlite            selectors
_codecs_hk          crashtest           lmdb                send2trash
_codecs_iso2022     crcmod              locale              setuptools
_codecs_jp          crypt               locket              setuptools_git
_codecs_kr          csimdjson           logging             shapely
_codecs_tw          csv                 lsb_release         shelve
_collections        ctypes              lunarcalendar       shlex
_collections_abc    cufflinks           lxml                shutil
_compat_pickle      curses              lzma                signal
_compression        cv2                 macpath             simdjson
_contextvars        cvxopt              mailbox             site
_crypt              cvxpy               mailcap             sitecustomize
_csv                cycler              markdown            six
_ctypes             cymem               markupsafe          skimage
_ctypes_test        cython              marshal             sklearn
_curses             cythonmagic         marshmallow         sklearn_pandas
_curses_panel       daft                math                slugify
_cvxcore            dask                matplotlib          smart_open
_datetime           dataclasses         matplotlib_venn     smtpd
_dbm                datascience         mimetypes           smtplib
_decimal            datetime            missingno           sndhdr
_distutils_hack     dateutil            mistune             snowballstemmer
_dlib_pybind11      dbm                 mizani              socket
_dummy_thread       dbus                mlxtend             socketserver
_ecos               debugpy             mmap                socks
_elementtree        decimal             modulefinder        sockshandler
_functools          decorator           more_itertools      softwareproperties
_hashlib            defusedxml          moviepy             sortedcontainers
_heapq              descartes           mpmath              soundfile
_imp                difflib             msgpack             spacy
_io                 dill                multidict           spacy_legacy
_json               dis                 multipledispatch    spacy_loggers
_locale             distributed         multiprocessing     sphinx
_lsprof             distutils           multitasking        spwd
_lzma               dlib                murmurhash          sql
_markupbase         dns                 music21             sqlalchemy
_md5                docs                natsort             sqlite3
_multibytecodec     doctest             nbconvert           sqlparse
_multiprocessing    docutils            nbformat            sre_compile
_opcode             dopamine            netCDF4             sre_constants
_operator           dot_parser          netrc               sre_parse
_osx_support        dummy_threading     networkx            srsly
_pickle             easydict            nibabel             ssl
_plotly_future_     ecos                nis                 stan
_plotly_utils       editdistance        nisext              stat
_posixsubprocess    ee                  nltk                statistics
_py_abc             email               nntplib             statsmodels
_pydecimal          en_core_web_sm      notebook            storemagic
_pyio               encodings           ntpath              string
_pyrsistent_version entrypoints         nturl2path          stringprep
_pytest             enum                numba               struct
_queue              ephem               numbergen           subprocess
_random             erfa                numbers             sunau
_remote_module_non_scriptable errno               numexpr             symbol
_rinterface_cffi_abi et_xmlfile          numpy               sympy
_rinterface_cffi_api etils               oauth2client        sympyprinting
_scs_direct         etuples             oauthlib            symtable
_scs_indirect       fa2                 ogr                 sys
_sha1               fastai              okgrade             sysconfig
_sha256             fastcore            opcode              syslog
_sha3               fastdownload        openpyxl            tables
_sha512             fastdtw             operator            tabnanny
_signal             fastjsonschema      opt_einsum          tabulate
_sitebuiltins       fastprogress        optparse            tarfile
_socket             fastrlock           os                  tblib
_soundfile          faulthandler        osgeo               telnetlib
_sqlite3            fcntl               osqp                tempfile
_sre                feather             osqppurepy          tenacity
_ssl                filecmp             osr                 tensorboard
_stat               fileinput           ossaudiodev         tensorboard_data_server
_string             filelock            packaging           tensorboard_plugin_wit
_strptime           firebase_admin      palettable          tensorflow
_struct             fix_yahoo_finance   pandas              tensorflow_datasets
_symtable           flask               pandas_datareader   tensorflow_estimator
_sysconfigdata_m_linux_x86_64-linux-gnu flatbuffers         pandas_gbq          tensorflow_gcs_config
_sysconfigdata_m_x86_64-linux-gnu fnmatch             pandas_profiling    tensorflow_hub
_testbuffer         folium              pandocfilters       tensorflow_io_gcs_filesystem
_testcapi           formatter           panel               tensorflow_metadata
_testimportmultiple fractions           param               tensorflow_probability
_testmultiphase     frozenlist          parser              termcolor
_thread             fsspec              parso               terminado
_threading_local    ftplib              partd               termios
_tkinter            functools           past                test
_tracemalloc        future              pasta               testpath
_warnings           gast                pastel              tests
_weakref            gc                  pathlib             text_unidecode
_weakrefset         gdal                pathy               textblob
_xxtestfuzz         gdalconst           patsy               textwrap
_yaml               gdalnumeric         pdb                 thinc
abc                 gdown               pep517              this
absl                genericpath         pexpect             threading
aeppl               gensim              pickle              threadpoolctl
aesara              geographiclib       pickleshare         tifffile
aifc                geopy               pickletools         time
aiohttp             getopt              pip                 timeit
aiosignal           getpass             pipes               tkinter
alabaster           gettext             piptools            tlz
albumentations      gi                  pkg_resources       token
altair              gin                 pkgutil             tokenize
antigravity         glob                platform            toml
apiclient           glob2               plistlib            tomli
appdirs             gnm                 plotly              toolz
apt                 google_auth_httplib2 plotlywidget        torch
apt_inst            google_auth_oauthlib plotnine            torchaudio
apt_pkg             google_drive_downloader pluggy              torchgen
aptsources          googleapiclient     pooch               torchsummary
argparse            googlesearch        poplib              torchtext
array               graphviz            portpicker          torchvision
arviz               greenlet            posix               tornado
ast                 gridfs              posixpath           tqdm
astor               grp                 pprint              trace
astropy             grpc                prefetch_generator  traceback
astunparse          gspread             preshed             tracemalloc
async_timeout       gspread_dataframe   prettytable         traitlets
asynchat            gym                 profile             tree
asyncio             gym_notices         progressbar         tty
asyncore            gzip                promise             turtle
asynctest           h5py                prompt_toolkit      tweepy
atari_py            hashlib             prophet             typeguard
atexit              heapdict            pstats              typer
atomicwrites        heapq               psutil              types
attr                hijri_converter     psycopg2            typing
attrs               hmac                pty                 typing_extensions
audioop             holidays            ptyprocess          tzlocal
audioread           holoviews           pvectorc            unicodedata
autograd            html                pwd                 unification
autoreload          html5lib            py                  unittest
babel               http                py_compile          uritemplate
backcall            httpimport          pyarrow             urllib
base64              httplib2            pyasn1              urllib3
bdb                 httplib2shim        pyasn1_modules      uu
bin                 httpstan            pyclbr              uuid
binascii            humanize            pycocotools         vega_datasets
binhex              hyperopt            pycparser           venv
bisect              idna                pyct                vis
bleach              imageio             pydantic            warnings
blis                imagesize           pydata_google_auth  wasabi
bokeh               imaplib             pydoc               wave
boost               imblearn            pydoc_data          wcwidth
branca              imgaug              pydot               weakref
bs4                 imghdr              pydot_ng            webargs
bson                imp                 pydotplus           webbrowser
builtins            importlib           pydrive             webencodings
bz2                 importlib_metadata  pyemd               werkzeug
cProfile            importlib_resources pyexpat             wheel
cachecontrol        imutils             pygments            widgetsnbextension
cached_property     inflect             pygtkcompat         wordcloud
cachetools          inspect             pylab               wrapt
caffe2              intervaltree        pylev               wsgiref
calendar            io                  pymc                xarray
catalogue           ipaddress           pymeeus             xarray_einstats
certifi             ipykernel           pymongo             xdrlib
cffi                ipykernel_launcher  pymystem3           xgboost
cftime              ipython_genutils    pyparsing           xkit
cgi                 ipywidgets          pyrsistent          xlrd
cgitb               isympy              pysndfile           xlwt
chardet             itertools           pytest              xml
charset_normalizer  itsdangerous        python_utils        xmlrpc
chunk               jax                 pytz                xxlimited
clang               jaxlib              pyviz_comms         xxsubtype
click               jieba               pywt                yaml
client              jinja2              pyximport           yarl
clikit              joblib              qdldl               yellowbrick
cloudpickle         jpeg4py             qudida              zict
cmake               json                queue               zipapp
cmath               jsonschema          quopri              zipfile
cmd                 jupyter             random              zipimport
cmdstanpy           jupyter_client      re                  zipp
code                jupyter_console     readline            zlib
codecs              jupyter_core        regex               zmq
codeop              jupyterlab_plotly   reprlib             
colab               jupyterlab_widgets  requests            

Enter any module name to get more help.  Or, type "modules spam" to search
for modules whose name or summary contain the string "spam".

Loops in Python
Need for loops
While Loop
For Loop
In [ ]:	

# While loop example -> program to print the table
# Program -> Sum of all digits of a given number
# Program -> keep accepting numbers from users till he/she enters a 0 and then find the avg
     
In [ ]:	

number = int(input('enter the number'))

i = 1

while i<11:
  print(number,'*',i,'=',number * i)
  i += 1
     
enter the number12
12 * 1 = 12
12 * 2 = 24
12 * 3 = 36
12 * 4 = 48
12 * 5 = 60
12 * 6 = 72
12 * 7 = 84
12 * 8 = 96
12 * 9 = 108
12 * 10 = 120
In [ ]:	

# while loop with else

x = 1

while x < 3:
  print(x)
  x += 1

else:
  print('limit crossed')
     
1
2
limit crossed
In [ ]:	

# Guessing game

# generate a random integer between 1 and 100
import random
jackpot = random.randint(1,100)

guess = int(input('guess karo'))
counter = 1
while guess != jackpot:
  if guess < jackpot:
    print('galat!guess higher')
  else:
    print('galat!guess lower')

  guess = int(input('guess karo'))
  counter += 1

else:
  print('correct guess')
  print('attempts',counter)



     
guess karo7
galat!guess higher
guess karo50
galat!guess lower
guess karo30
galat!guess higher
guess karo40
galat!guess lower
guess karo35
galat!guess lower
guess karo32
galat!guess higher
guess karo33
correct guess
attempts 7
In [ ]:	

# For loop demo

for i in {1,2,3,4,5}:
  print(i)
     
1
2
3
4
5
In [ ]:	

# For loop examples
     
Program - The current population of a town is 10000. The population of the town is increasing at the rate of 10% per year. You have to write a program to find out the population at the end of each of the last 10 years.
In [ ]:	

curr_pop = 10000

for i in range(10,0,-1):
  print(i,curr_pop)
  curr_pop = curr_pop - 0.1*curr_pop

     
10 10000
9 9000.0
8 8100.0
7 7290.0
6 6561.0
5 5904.9
4 5314.41
3 4782.969
2 4304.6721
1 3874.20489
Sequence sum
1/1! + 2/2! + 3/3! + ...



Session 1 task solution

Task : Session 1
Solve these questions own your own and try to test yourself what you have learned in the session.

Happy Learning!

Q1 :- Print the given strings as per stated format.
Given strings:

"Data" "Science" "Mentorship" "Program"
"By" "CampusX"
Output:

Data-Science-Mentorship-Program-started-By-CampusX
Concept- [Seperator and End]

In [ ]:	

# Write your code here
print('Data-Science-Mentronship-program-started-By-CampusX')
     
Data-Science-Mentronship-program-started-By-CampusX
Q2:- Write a program that will convert celsius value to fahrenheit.
In [ ]:	

# Write your code here
cel=int(input('Enter the celcious value'))
fahrenheit = (1.8 * cel) + 32
print('the fahernahit value is',fahrenheit)
     
Enter the celcious value2
the fahernahit value is 35.6
Q3:- Take 2 numbers as input from the user.Write a program to swap the numbers without using any special python syntax.
In [ ]:	

# Write your code here
first_value=int(input('Enter the first number'))
second_value=int(input('Enter the second number'))
temp=first_value
first_value=second_value
second_value=temp
print(first_value,second_value)
     
Enter the first number3
Enter the second number2
2 3
Q4:- Write a program to find the euclidean distance between two coordinates.Take both the coordinates from the user as input.
In [ ]:	

# Write your code here
Input : x1, y1 = (3, 4)
x2, y2 = (7, 7)
Output : 5

Input : x1, y1 = (3, 4)
x2, y2 = (4, 3)

Task Solution:----------------------------------





In [ ]:	


     
In [ ]:	

# Assignment 1 ka question 10
import math

h_t=float(input('Enter the Height ='))
w_t=float(input('Enter the width ='))
l_t=float(input('Enter the length ='))

h_g=float(input('Enter the height of the glass='))
r_g=float(input('Enter the radious of the glass ='))

vol_tank=h_t*w_t*l_t
vol_glass=3.14*r_g*r_g*h_g
print('Number of glasses=',math.floor(vol_tank/vol_glass))
     
Enter the Height =1234
Enter the width =234
Enter the length =123
Enter the height of the glass=12
Enter the radious of the glass =8
Number of glasses= 14728
In [ ]:	

#Sum of square of N natural number
n=int(input('Enter the number'))
result= n*(n+1)*(2*n+1)/6 # formula or with loops
print('The sum of square of this natueal number',result)
     
Enter the number3
The sum of square of this natueal number 14.0
In [ ]:	

#8 write the differance between terms and the sum of the values.
first_term=int(input('Enter the first term values ='))
second_term=int(input('Enter the second term values ='))
n=int(input('Enter the value of n ='))
d= second_term - first_term
an=first_term+(n-1)*d # where d  is differance between two values
print('The sum of differance between two numbers=',an)

     
Enter the first term values =3
Enter the second term values =6
Enter the value of n =8
The sum of differance between two numbers 24
In [ ]:	

# solve the sum of the fraction problem
n1=int(input('Enter the first numerator values'))
d1=int(input('Enter the first denominator values'))
n2=int(input('Enter the second numerator values'))
d2=int(input('Enter the second denominator values'))
fn=n1*d2+n2*d1
denominator=d1*d2
print('The fraction value is=',fn/denominator)
     
Enter the first numerator values2
Enter the first denominator values2
Enter the second numerator values3
Enter the second denominator values3
The fraction value is= 2.0
Print the given strings as per stated format.
In [ ]:	

# In this progrma we manely want to seperate two line string.
print('Data', 'science', 'mentronship', 'program',sep ='-',end='-started-')
print('By', 'campusX',sep='-')
     
Data-science-mentronship-program-started-By-campusX
Print the value into celcious to faranhit.
In [ ]:	

celcious=int(input('Enter the temperiture in celcious'))
faranhit= celcious *9/5+32       # c*(9/5)+32
print(faranhit)



















     
Enter the temperiture in celcious4
39.2
Legs and chiken program
In [ ]:	

#count the head od dog and chiken
x=int(input('Enter the number of head ofdog '))
dog=x*4
print('The number of leg of dog is=',dog)
y=int(input('Enter the number of head of cheken'))
chiken=y*2
print('The number of leg of chiken=',chiken )
     
Enter the number of head ofdog 5
the number of leg of dogis= 20
Enter the number of head of cheken50
the number of leg of chiken= 100
In [ ]:	

num=int(input('Enter the number of leg of dog '))
if num%4==0:
  print('This is dog')
elif (num%2)!=0:
 print('this is not any one')
else:
  print('This is a cheken')
     
Enter the number of leg of dog 6
This is a cheken
swapping program
In [1]:	

#Swapping program without using extra variable
a=3
b=5
a=b
b=a
print(a)

     
5
In [ ]:	

# First method which we  swap twonumbers
a=3
b=5
a,b=b,a
print(a,b)
     
5 3
In [ ]:	

# second method which we take one extra variable.
a=3
b=5
temp=a
a=b
b=temp
print(a)
print(b)


     
5
3
write a program for find the distance between two points.
In [ ]:	

p_x1=int(input('Enter the first quardinate first point'))
q_y1=int(input('Enter the second quardinate first point'))
p_x2=int(input('Enter the first quardinate second point'))
q_y2=int(input('Enter the second quardinate second point'))
distance=((p_x2-p_x1**2) + (q_y2-q_y1)**2) **0.5
print(round,'The distance between two points is =',(distance,2))


     
  	
Enter the first quardinate first point0
Enter the second quardinate first point0
Enter the first quardinate second point2
Enter the second quardinate second point2
<built-in function round> The distance between two points is = (2.449489742783178, 2)




 Second day concepts in depth








In [ ]:	

#Arithmatic operator
print(5+6)
print(5*6)
print(5/2)
print(5//2)#integer type division
print(5%2)
print(5**2)#yani five ki power two


     
11
30
2.5
2
1
25
relational operator
In [ ]:	

#relational operator
print(2<5)
print(2>5)
print(2<=5)
print(5==6)
print(2>=5)
print(2==2)
     
True
False
True
False
False
True
Logical operator
In [ ]:	

#logical operator
print(2 and 0)
print(2 and 3)
print(5 or 10)
print(5 or 0)
print(0 or 5)
print(0 or 0 or 9)
print(2 and 6 and 5)
print(not  1 )
print(not 0)
     
0
3
5
5
5
9
5
False
True
bitwise operator
In [ ]:	

#bitwise operator

#bitwisewise and
print(2 & 3)
#bitwisewise or
print(2 | 3)
#bitwise xor
print(2 ^ 3)# xor me same me zero aur diffent me 1
print(2 ^ 2)
#bitwise xnor
print(~3)
#bitwise left shift operator
print(2 >> 4)
print(4 >> 2)
#bitwise right shift operator
print(2 << 4)
print(4 << 3 )
#Assignment operator
a=2
# a=a+2
a+=2
print(a)
#second
a=2
#that means a=a%2
a%=2
print(a)# eska matlab a ka 2 ke sath modulas ho rha hai aur a me hi store ho ja rha  hai.

#membership
#in/not in
print('d' in 'delhi')#delhi me d hai ya nhi
print('d' not in 'delhi')
print(1 in [1,2,3,4,5,6,7])
print('D' in 'delhi')

#program
number=int(input("enter the 3 digit number= "))
#345%10 krne pr 5melega
a=number%10
number=number//10 #yaha 45 ka integer division krne pr 5 melega
#34%10 krne pr 4 melega
b=number%10
number=number//10# yaha 4 ka integer division krne pr 4 mel rha hai
#3%10 krne pr 3 melega
c=number%10
print(a+b+c)


#program for enter 6 digit number and add its bit
number=int(input('Enter six digit number = '))

a=number%10
number=number//10

b==number%10
number=number//10

c=number%10
number=number//10

d=number%10
number=number//10

e=number%10
number=number//10

f=number%10

print(a+b+c+d+e+f)


     
2
3
1
0
-4
0
1
32
32
4
0
True
False
True
False
enter the 3 digit number= 123
6
Enter six digit number = 987654
36
if else1
In [ ]:	

#write the login second program
email=input('Enter the email')
password=input('Enter the password')
if email =='rsinghlax@gmail.com' and password =='9696':
  print('welcome for joining')
elif email =='rsinghlax@gmail.com' and password !='9696' :
  print('Incorrect password')
  password=input('Enter the password again')
  if password == '1234':
   print('welcome,finally')
  else:
   print('Beta tumse nhi ho payega')
else:
  print("Your email or password is incorrect")
     
Enter the emailrsinghlax@gmail.com
Enter the password1234
Incorrect password
Enter the password again1234
welcome,finally
In [ ]:	

#max of three number
a=int(input('Enter the first number'))
b=int(input('Enter the second number'))
c=int(input('Enter the third number'))
if a>b and a>c:
  print('first value is correct')
elif b>a and b>c:
  print('the second value is correct')
else:
  print('third value is correct')
     
Enter the first number9
Enter the second number8
Enter the third number4
first value is correct
In [ ]:	
Enter the first number2
Enter the second number3
Enter the third number4
first value is correct
In [ ]:	

#menu driven calculator program
f_num=int(input('enter the 1st number'))
s_num=int(input('enter the 1st number'))
#th_num=int(input('enter the 1st number'))

op=input('Enter the operation')

if op == '+' :
  print('The right answer is=',f_num + s_num)
elif op == '-':
  print('The right answer is=',f_num - s_num)
elif op == '*':
  print('The right answer is=',f_num * s_num)
else:
  print('The right answer is=',f_num / s_num)

     
enter the 1st number32
enter the 1st number12
Enter the operation/
The right answer is= 2.6666666666666665
Atm software program
In [ ]:	


email=input('Enter the email')
password=input('Enter the password')
if email =='rsinghlax@gmail.com' and password =='9696':
  print('welcome for joining')
else:
  print("Your email or password is incorrect")
     
Enter the emailrsinghlax@gmail.com
Enter the password9696
welcome for joining
In [ ]:	

#menu based atm program
 # multiple line string ko triple coat me likha jata hai
menu=input("""
Hi! how can i help you

1. Enter 1 for pin change
2. Enter 2 for baleance cheak
3. Enter 3 for withdrawl
4. Enter 4 for Exit

""")
if menu == '1':
  print('change your pin')
elif menu == '2':
  print('baleance cheak')
elif menu == '3':
  print('For withdrawl')
else:
  print('Exit')


     
Hi! how can i help you

1. Enter 1 for pin change
2. Enter 2 for baleance cheak
3. Enter 3 for withdrawl
4. Enter 4 for Exit

3
For withdrawl
modules
In [ ]:	

#modules me kesi ke likhe gye code ko use krte hai
#esme bhout se funcrion use hote hai math,keyword,date time, random
#These are already written format
# esme hum modules ko import krte hai

     
In [ ]:	

#math module
import math
x=math.factorial(4)
print('The factorial of 4 is=',x)
x=math.sqrt(196) #yadi chea to bina kesi aur variable me store kre bhi kiya ja skta hai.
print('The sqrt of 196 is =',x)
     
The factorial of 4 is= 24
The sqrt of 196 is = 14.0
In [ ]:	


     
In [ ]:	

#keyword
import keyword
keyword.kwlist
     
Out[ ]:	
['False',
 'None',
 'True',
 'and',
 'as',
 'assert',
 'async',
 'await',
 'break',
 'class',
 'continue',
 'def',
 'del',
 'elif',
 'else',
 'except',
 'finally',
 'for',
 'from',
 'global',
 'if',
 'import',
 'in',
 'is',
 'lambda',
 'nonlocal',
 'not',
 'or',
 'pass',
 'raise',
 'return',
 'try',
 'while',
 'with',
 'yield']
In [ ]:	

#Es method  se bhi likha ja skta hai.
import keyword
key_word_ki_list=keyword.kwlist
print(key_word_ki_list)

     
['False', 'None', 'True', 'and', 'as', 'assert', 'async', 'await', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield']
In [ ]:	

# random module
import random
x=random.randint(5,100)#5 se 100 ke beech koi bhi  random value dene ka kaam krta hai.
print('The random value bitween 5 to 100 many more or single =',x)
     
The random value bitween 5 to 100 many more or single = 81
In [ ]:	

#Date and time module
import datetime
print(datetime.datetime.now())
print(help('modules'))
     
Please wait a moment while I gather a list of all available modules...

/usr/local/lib/python3.10/dist-packages/IPython/kernel/__init__.py:12: ShimWarning: The `IPython.kernel` package has been deprecated since IPython 4.0.You should import from ipykernel or jupyter_client instead.
  warn("The `IPython.kernel` package has been deprecated since IPython 4.0."
/usr/local/lib/python3.10/dist-packages/altair/vega/v5/__init__.py:18: AltairDeprecationWarning: The module altair.vega.v5 is deprecated and will be removed in Altair 5.
  warnings.warn(
/usr/local/lib/python3.10/dist-packages/altair/vegalite/v3/__init__.py:29: AltairDeprecationWarning: The module altair.vegalite.v3 is deprecated and will be removed in Altair 5. Use `import altair as alt` instead of `import altair.vegalite.v3 as alt`.
  warnings.warn(
/usr/local/lib/python3.10/dist-packages/jupyter_client/ssh/tunnel.py:57: DeprecationWarning:

zmq.utils.strtypes is deprecated in pyzmq 23.

Downloading https://dlib.net/files/shape_predictor_68_face_landmarks.dat.bz2 to /root/mlxtend_data/shape_predictor_68_face_landmarks.dat.bz2
/usr/local/lib/python3.10/dist-packages/moviepy/video/fx/painting.py:7: DeprecationWarning:

Please use `sobel` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.

/usr/lib/python3.10/pkgutil.py:92: UserWarning:

The DICOM readers are highly experimental, unstable, and only work for Siemens time-series at the moment
Please use with caution.  We would be grateful for your help in improving them

/usr/local/lib/python3.10/dist-packages/nltk/twitter/__init__.py:20: UserWarning:

The twython library has not been installed. Some functionality from the twitter package will not be available.

/usr/local/lib/python3.10/dist-packages/notebook/utils.py:280: DeprecationWarning:

distutils Version classes are deprecated. Use packaging.version instead.

/usr/local/lib/python3.10/dist-packages/notebook/utils.py:280: DeprecationWarning:

distutils Version classes are deprecated. Use packaging.version instead.

/usr/local/lib/python3.10/dist-packages/matplotlib_inline/config.py:68: DeprecationWarning:

InlineBackend._figure_format_changed is deprecated in traitlets 4.1: use @observe and @unobserve instead.

/usr/lib/python3.10/pkgutil.py:92: NumbaPendingDeprecationWarning:

The 'pycc' module is pending deprecation. Replacement technology is being developed.

Pending Deprecation in Numba 0.57.0. For more information please see: https://numba.readthedocs.io/en/stable/reference/deprecation.html#deprecation-of-the-numba-pycc-module

/usr/lib/python3.10/pkgutil.py:92: UserWarning:

The numpy.array_api submodule is still experimental. See NEP 47.

/usr/lib/python3.10/pkgutil.py:92: DeprecationWarning:



  `numpy.distutils` is deprecated since NumPy 1.23.0, as a result
  of the deprecation of `distutils` itself. It will be removed for
  Python >= 3.12. For older Python versions it will remain present.
  It is recommended to use `setuptools < 60.0` for those Python versions.
  For more details, see:
    https://numpy.org/devdocs/reference/distutils_status_migration.html 



/usr/local/lib/python3.10/dist-packages/pandas/core/indexes/multi.py:643: DeprecationWarning:

`cumproduct` is deprecated as of NumPy 1.25.0, and will be removed in NumPy 2.0. Please use `cumprod` instead.

/usr/local/lib/python3.10/dist-packages/pandas/core/reshape/util.py:60: DeprecationWarning:

`product` is deprecated as of NumPy 1.25.0, and will be removed in NumPy 2.0. Please use `prod` instead.

/usr/local/lib/python3.10/dist-packages/pandas/core/reshape/util.py:60: DeprecationWarning:

`product` is deprecated as of NumPy 1.25.0, and will be removed in NumPy 2.0. Please use `prod` instead.

/usr/local/lib/python3.10/dist-packages/pandas/core/indexes/multi.py:643: DeprecationWarning:

`cumproduct` is deprecated as of NumPy 1.25.0, and will be removed in NumPy 2.0. Please use `cumprod` instead.

/usr/local/lib/python3.10/dist-packages/pandas/core/reshape/util.py:60: DeprecationWarning:

`product` is deprecated as of NumPy 1.25.0, and will be removed in NumPy 2.0. Please use `prod` instead.

/usr/local/lib/python3.10/dist-packages/pandas/core/reshape/util.py:60: DeprecationWarning:

`product` is deprecated as of NumPy 1.25.0, and will be removed in NumPy 2.0. Please use `prod` instead.

/usr/local/lib/python3.10/dist-packages/pandas/core/reshape/util.py:60: DeprecationWarning:

`product` is deprecated as of NumPy 1.25.0, and will be removed in NumPy 2.0. Please use `prod` instead.

/usr/local/lib/python3.10/dist-packages/pandas_datareader/compat/__init__.py:11: DeprecationWarning:

distutils Version classes are deprecated. Use packaging.version instead.

/usr/local/lib/python3.10/dist-packages/pandas_datareader/compat/__init__.py:13: DeprecationWarning:

distutils Version classes are deprecated. Use packaging.version instead.

/usr/local/lib/python3.10/dist-packages/pandas_datareader/compat/__init__.py:14: DeprecationWarning:

distutils Version classes are deprecated. Use packaging.version instead.

/usr/local/lib/python3.10/dist-packages/pandas_datareader/compat/__init__.py:15: DeprecationWarning:

distutils Version classes are deprecated. Use packaging.version instead.

/usr/local/lib/python3.10/dist-packages/pip/_vendor/pkg_resources/__init__.py:121: DeprecationWarning:

pkg_resources is deprecated as an API

/usr/local/lib/python3.10/dist-packages/pip/_vendor/pkg_resources/__init__.py:2870: DeprecationWarning:

Deprecated call to `pkg_resources.declare_namespace('google')`.
Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages

/usr/local/lib/python3.10/dist-packages/pip/_vendor/pkg_resources/__init__.py:2870: DeprecationWarning:

Deprecated call to `pkg_resources.declare_namespace('google')`.
Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages

/usr/local/lib/python3.10/dist-packages/pip/_vendor/pkg_resources/__init__.py:2870: DeprecationWarning:

Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.
Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages

/usr/local/lib/python3.10/dist-packages/pip/_vendor/pkg_resources/__init__.py:2349: DeprecationWarning:

Deprecated call to `pkg_resources.declare_namespace('google')`.
Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages

/usr/local/lib/python3.10/dist-packages/pip/_vendor/pkg_resources/__init__.py:2870: DeprecationWarning:

Deprecated call to `pkg_resources.declare_namespace('google')`.
Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages

/usr/local/lib/python3.10/dist-packages/pip/_vendor/pkg_resources/__init__.py:2870: DeprecationWarning:

Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.
Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages

/usr/local/lib/python3.10/dist-packages/pip/_vendor/pkg_resources/__init__.py:2870: DeprecationWarning:

Deprecated call to `pkg_resources.declare_namespace('google')`.
Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages

/usr/local/lib/python3.10/dist-packages/pip/_vendor/pkg_resources/__init__.py:2870: DeprecationWarning:

Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.
Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages

/usr/local/lib/python3.10/dist-packages/pip/_vendor/pkg_resources/__init__.py:2870: DeprecationWarning:

Deprecated call to `pkg_resources.declare_namespace('google')`.
Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages

/usr/local/lib/python3.10/dist-packages/pip/_vendor/pkg_resources/__init__.py:2870: DeprecationWarning:

Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.
Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages

/usr/local/lib/python3.10/dist-packages/pip/_vendor/pkg_resources/__init__.py:2870: DeprecationWarning:

Deprecated call to `pkg_resources.declare_namespace('google')`.
Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages

/usr/local/lib/python3.10/dist-packages/pip/_vendor/pkg_resources/__init__.py:2870: DeprecationWarning:

Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.
Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages

/usr/local/lib/python3.10/dist-packages/pip/_vendor/pkg_resources/__init__.py:2870: DeprecationWarning:

Deprecated call to `pkg_resources.declare_namespace('google')`.
Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages

/usr/local/lib/python3.10/dist-packages/pip/_vendor/pkg_resources/__init__.py:2870: DeprecationWarning:

Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.
Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages

/usr/local/lib/python3.10/dist-packages/pip/_vendor/pkg_resources/__init__.py:2870: DeprecationWarning:

Deprecated call to `pkg_resources.declare_namespace('google')`.
Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages

/usr/local/lib/python3.10/dist-packages/pip/_vendor/pkg_resources/__init__.py:2870: DeprecationWarning:

Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.
Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages

/usr/local/lib/python3.10/dist-packages/pip/_vendor/pkg_resources/__init__.py:2870: DeprecationWarning:

Deprecated call to `pkg_resources.declare_namespace('google')`.
Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages

/usr/local/lib/python3.10/dist-packages/pip/_vendor/pkg_resources/__init__.py:2870: DeprecationWarning:

Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.
Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages

/usr/local/lib/python3.10/dist-packages/pip/_vendor/pkg_resources/__init__.py:2870: DeprecationWarning:

Deprecated call to `pkg_resources.declare_namespace('google')`.
Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages

/usr/local/lib/python3.10/dist-packages/pip/_vendor/pkg_resources/__init__.py:2870: DeprecationWarning:

Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.
Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages

/usr/local/lib/python3.10/dist-packages/pip/_vendor/pkg_resources/__init__.py:2870: DeprecationWarning:

Deprecated call to `pkg_resources.declare_namespace('google')`.
Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages

/usr/local/lib/python3.10/dist-packages/pip/_vendor/pkg_resources/__init__.py:2870: DeprecationWarning:

Deprecated call to `pkg_resources.declare_namespace('google')`.
Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages

/usr/local/lib/python3.10/dist-packages/pip/_vendor/pkg_resources/__init__.py:2870: DeprecationWarning:

Deprecated call to `pkg_resources.declare_namespace('mpl_toolkits')`.
Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages

/usr/local/lib/python3.10/dist-packages/pip/_vendor/pkg_resources/__init__.py:2870: DeprecationWarning:

Deprecated call to `pkg_resources.declare_namespace('google')`.
Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages

/usr/local/lib/python3.10/dist-packages/pip/_vendor/pkg_resources/__init__.py:2870: DeprecationWarning:

Deprecated call to `pkg_resources.declare_namespace('sphinxcontrib')`.
Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages

Python version: 3.10.12 (main, Nov 20 2023, 15:14:05) [GCC 11.4.0]
GEOS version: 3.11.3-CAPI-1.17.3
Numpy version: 1.25.2
/usr/lib/python3.10/pkgutil.py:92: UserWarning: viewer requires Qt
/usr/local/lib/python3.10/dist-packages/tensorboard/_vendor/html5lib/filters/sanitizer.py:29: DeprecationWarning: html5lib's sanitizer is deprecated; see https://github.com/html5lib/html5lib-python/issues/443 and please let us know if Bleach is unsuitable for your needs
/usr/local/lib/python3.10/dist-packages/tensorflow_probability/python/__init__.py:49: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives
/usr/local/lib/python3.10/dist-packages/torch/distributed/_shard/checkpoint/__init__.py:8: DeprecationWarning: torch.distributed._shard.checkpoint will be deprecated, use torch.distributed.checkpoint instead
/usr/local/lib/python3.10/dist-packages/torch/distributed/_sharded_tensor/__init__.py:8: DeprecationWarning: torch.distributed._sharded_tensor will be deprecated, use torch.distributed._shard.sharded_tensor instead
/usr/local/lib/python3.10/dist-packages/torch/distributed/_sharding_spec/__init__.py:8: DeprecationWarning: torch.distributed._sharding_spec will be deprecated, use torch.distributed._shard.sharding_spec instead
No CUDA runtime is found, using CUDA_HOME='/usr/local/cuda'
---------------------------------------------------------------------------
Skipped                                   Traceback (most recent call last)
<ipython-input-26-81cb36fad336> in <cell line: 4>()
      2 import datetime
      3 datetime.datetime.now()
----> 4 help('modules')

/usr/lib/python3.10/_sitebuiltins.py in __call__(self, *args, **kwds)
    101     def __call__(self, *args, **kwds):
    102         import pydoc
--> 103         return pydoc.help(*args, **kwds)

/usr/lib/python3.10/pydoc.py in __call__(self, request)
   2011     def __call__(self, request=_GoInteractive):
   2012         if request is not self._GoInteractive:
-> 2013             self.help(request)
   2014         else:
   2015             self.intro()

/usr/lib/python3.10/pydoc.py in help(self, request)
   2058             elif request == 'symbols': self.listsymbols()
   2059             elif request == 'topics': self.listtopics()
-> 2060             elif request == 'modules': self.listmodules()
   2061             elif request[:8] == 'modules ':
   2062                 self.listmodules(request.split()[1])

/usr/lib/python3.10/pydoc.py in listmodules(self, key)
   2210             def onerror(modname):
   2211                 callback(None, modname, None)
-> 2212             ModuleScanner().run(callback, onerror=onerror)
   2213             self.list(modules.keys())
   2214             self.output.write('''

/usr/lib/python3.10/pydoc.py in run(self, callback, key, completer, onerror)
   2239                         callback(None, modname, desc)
   2240 
-> 2241         for importer, modname, ispkg in pkgutil.walk_packages(onerror=onerror):
   2242             if self.quit:
   2243                 break

/usr/lib/python3.10/pkgutil.py in walk_packages(path, prefix, onerror)
    105                 path = [p for p in path if not seen(p)]
    106 
--> 107                 yield from walk_packages(path, info.name+'.', onerror)
    108 
    109 

/usr/lib/python3.10/pkgutil.py in walk_packages(path, prefix, onerror)
     90         if info.ispkg:
     91             try:
---> 92                 __import__(info.name)
     93             except ImportError:
     94                 if onerror is not None:

/usr/local/lib/python3.10/dist-packages/xgboost/testing/__init__.py in <module>
     45 )
     46 
---> 47 hypothesis = pytest.importorskip("hypothesis")
     48 
     49 # pylint:disable=wrong-import-position,wrong-import-order

/usr/local/lib/python3.10/dist-packages/_pytest/outcomes.py in importorskip(modname, minversion, reason)
    294             if reason is None:
    295                 reason = f"could not import {modname!r}: {exc}"
--> 296             raise Skipped(reason, allow_module_level=True) from None
    297     mod = sys.modules[modname]
    298     if minversion is None:

Skipped: could not import 'hypothesis': No module named 'hypothesis'
Loop in python
In [ ]:	

#while loop program
#print the table using while loop
number=int(input('Enter the any number'))
i=1
while i<11:
  print(number * i )
  i+=1 #i=i+1










     
/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.
In [ ]:	

#while loop program
#print the table using while loop
number=int(input('Enter the any number'))
i=1
while i<11:
  print(number,'*',i,'=',number*i )
  i += 1

     
In [ ]:	

x=1
while i<3:
  print(x)
  x+=1
else:
    print('limit crossed')

     
Guessing game
In [ ]:	

# guessing game
#we generate a random variable
#first of all we take some ramdom variablr to user
import random
jackport=random.randint(1,100)
guess=int(input('guess any random value'))
counter = 1
while guess != jackport:


   if guess
python for loop
In [ ]:	

#for loop
for i in range (1,11):
  print (i)

     

    

Strings define with notes











Program - The current population of a town is 10000. The population of the town is increasing at the rate of 10% per year. You have to write a program to find out the population at the end of each of the last 10 years.
In [ ]:	

# Code here
curr_pop = 10000

for i in range(10,0,-1):
  print(i,curr_pop)
  curr_pop = curr_pop/1.1

     
10 10000
9 9090.90909090909
8 8264.462809917353
7 7513.148009015775
6 6830.134553650703
5 6209.213230591548
4 5644.739300537771
3 5131.5811823070635
2 4665.07380209733
1 4240.976183724845
Sequence sum
1/1! + 2/2! + 3/3! + ...

In [ ]:	

# Code here

n = int(input('enter n'))

result = 0
fact = 1

for i in range(1,n+1):
  fact = fact * i
  result = result + i/fact

print(result)



     
enter n2
2.0
Nested Loops
In [ ]:	

# Examples -> unique pairs

for i in range(1,5):
  for j in range(1,5):
    print(i,j)
     
1 1
1 2
1 3
1 4
2 1
2 2
2 3
2 4
3 1
3 2
3 3
3 4
4 1
4 2
4 3
4 4
Pattern 1
***
****
***

In [ ]:	

# code here

rows = int(input('enter number of rows'))

for i in range(1,rows+1):
  for j in range(1,i+1):
    print('*',end='')
  print()

     
enter number of rows10
*
**
***
****
*****
******
*******
********
*********
**********
Pattern 2
1
121
12321
1234321

In [ ]:	

# Code here
rows = int(input('enter number of rows'))

for i in range(1,rows+1):
  for j in range(1,i+1):
    print(j,end='')
  for k in range(i-1,0,-1):
    print(k,end='')

  print()

     
enter number of rows4
1
121
12321
1234321
Loop Control Statement
Break
Continue
Pass
In [ ]:	

for i in range(1,10):
  if i == 5:
    break
  print(i)
     
1
2
3
4
In [ ]:	

lower = int(input('enter lower range'))
upper = int(input('enter upper range'))

for i in range(lower,upper+1):
  for j in range(2,i):
    if i%j == 0:
      break
  else:
    print(i)
     
enter lower range10
enter upper range100
11
13
17
19
23
29
31
37
41
43
47
53
59
61
67
71
73
79
83
89
97
In [ ]:	

# Continue
for i in range(1,10):
  if i == 5:
    continue
  print(i)
     
1
2
3
4
6
7
8
9
In [ ]:	

for i in range(1,10):
  pass

     
Strings are sequence of Characters

In Python specifically, strings are a sequence of Unicode Characters

Creating Strings
Accessing Strings
Adding Chars to Strings
Editing Strings
Deleting Strings
Operations on Strings
String Functions
Creating Stings
In [ ]:	

s = 'hello'
s = "hello"
# multiline strings
s = '''hello'''
s = """hello"""
s = str('hello')
print(s)
     
hello
In [ ]:	

"it's raining outside"
     
Out[ ]:	
"it's raining outside"
Accessing Substrings from a String
In [ ]:	

# Positive Indexing
s = 'hello world'
print(s[41])
     
---------------------------------------------------------------------------
IndexError                                Traceback (most recent call last)
<ipython-input-61-633ba99ed6e5> in <module>
      1 # Positive Indexing
      2 s = 'hello world'
----> 3 print(s[41])

IndexError: string index out of range
In [ ]:	

# Negative Indexing
s = 'hello world'
print(s[-3])
     
r
In [ ]:	

# Slicing
s = 'hello world'
print(s[6:0:-2])
     
wol
In [ ]:	

print(s[::-1])
     
dlrow olleh
In [ ]:	

s = 'hello world'
print(s[-1:-6:-1])
     
dlrow
Editing and Deleting in Strings
In [ ]:	

s = 'hello world'
s[0] = 'H'

# Python strings are immutable
     
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-80-0c8a824e3b73> in <module>
      1 s = 'hello world'
----> 2 s[0] = 'H'

TypeError: 'str' object does not support item assignment
In [ ]:	

s = 'hello world'
del s
print(s)
     
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-81-9ae37fbf1c6c> in <module>
      1 s = 'hello world'
      2 del s
----> 3 print(s)

NameError: name 's' is not defined
In [ ]:	

s = 'hello world'
del s[-1:-5:2]
print(s)
     
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-82-d0d823eafb6b> in <module>
      1 s = 'hello world'
----> 2 del s[-1:-5:2]
      3 print(s)

TypeError: 'str' object does not support item deletion
Operations on Strings
Arithmetic Operations
Relational Operations
Logical Operations
Loops on Strings
Membership Operations
In [ ]:	

print('delhi' + ' ' + 'mumbai')
     
delhi mumbai
In [ ]:	

print('delhi'*5)
     
delhidelhidelhidelhidelhi
In [ ]:	

print("*"*50)
     
**************************************************
In [ ]:	

'delhi' != 'delhi'
     
Out[ ]:	
False
In [ ]:	

'mumbai' > 'pune'
# lexiographically
     
Out[ ]:	
False
In [ ]:	

'Pune' > 'pune'
     
Out[ ]:	
False
In [ ]:	

'hello' and 'world'
     
Out[ ]:	
'world'
In [ ]:	

'hello' or 'world'
     
Out[ ]:	
'hello'
In [ ]:	

'' and 'world'
     
Out[ ]:	
''
In [ ]:	

'' or 'world'
     
Out[ ]:	
'world'
In [ ]:	

'hello' or 'world'
     
Out[ ]:	
'hello'
In [ ]:	

'hello' and 'world'
     
Out[ ]:	
'world'
In [ ]:	

not 'hello'
     
Out[ ]:	
False
In [ ]:	

for i in 'hello':
  print(i)
     
h
e
l
l
o
In [ ]:	

for i in 'delhi':
  print('pune')
     
pune
pune
pune
pune
pune
In [ ]:	

'D' in 'delhi'
     
Out[ ]:	
False
In [ ]:	


     
In [ ]:	


     
In [ ]:	


     
Common Functions
len
max
min
sorted
In [ ]:	

len('hello world')
     
Out[ ]:	
11
In [ ]:	

max('hello world')
     
Out[ ]:	
'w'
In [ ]:	

min('hello world')
     
Out[ ]:	
' '
In [ ]:	

sorted('hello world',reverse=True)
     
Out[ ]:	
['w', 'r', 'o', 'o', 'l', 'l', 'l', 'h', 'e', 'd', ' ']
In [ ]:	


     
Capitalize/Title/Upper/Lower/Swapcase
In [ ]:	

s = 'hello world'
print(s.capitalize())
print(s)
     
Hello world
hello world
In [ ]:	

s.title()
     
Out[ ]:	
'Hello World'
In [ ]:	

s.upper()
     
Out[ ]:	
'HELLO WORLD'
In [ ]:	

'Hello Wolrd'.lower()
     
Out[ ]:	
'hello wolrd'
In [ ]:	

'HeLlO WorLD'.swapcase()
     
Out[ ]:	
'hElLo wORld'
Count/Find/Index
In [ ]:	

'my name is nitish'.count('i')
     
Out[ ]:	
3
In [ ]:	

'my name is nitish'.find('x')
     
Out[ ]:	
-1
In [ ]:	

'my name is nitish'.index('x')
     
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
<ipython-input-121-12e2ad5b75e9> in <module>
----> 1 'my name is nitish'.index('x')

ValueError: substring not found
In [ ]:	


     
endswith/startswith
In [ ]:	

'my name is nitish'.endswith('sho')
     
Out[ ]:	
False
In [ ]:	

'my name is nitish'.startswith('1my')
     
Out[ ]:	
False
format
In [ ]:	

name = 'nitish'
gender = 'male'

'Hi my name is {1} and I am a {0}'.format(gender,name)
     
Out[ ]:	
'Hi my name is nitish and I am a male'
isalnum/ isalpha/ isdigit/ isidentifier
In [ ]:	

'nitish1234%'.isalnum()
     
Out[ ]:	
False
In [ ]:	

'nitish'.isalpha()
     
Out[ ]:	
True
In [ ]:	

'123abc'.isdigit()
     
Out[ ]:	
False
In [ ]:	

'first-name'.isidentifier()
     
Out[ ]:	
False
In [ ]:	


     
Split/Join
In [ ]:	

'hi my name is nitish'.split()
     
Out[ ]:	
['hi', 'my', 'name', 'is', 'nitish']
In [ ]:	

" ".join(['hi', 'my', 'name', 'is', 'nitish'])
     
Out[ ]:	
'hi my name is nitish'
Replace
In [ ]:	

'hi my name is nitish'.replace('nitisrgewrhgh','campusx')
     
Out[ ]:	
'hi my name is nitish'
Strip
In [ ]:	

'nitish                           '.strip()
     
Out[ ]:	
'nitish'
Example Programs
In [ ]:	

# Find the length of a given string without using the len() function

s = input('enter the string')

counter = 0

for i in s:
  counter += 1

print('length of string is',counter)
     
enter the stringnitish
length of string is 6
In [ ]:	

# Extract username from a given email.
# Eg if the email is nitish24singh@gmail.com
# then the username should be nitish24singh

s = input('enter the email')

pos = s.index('@')
print(s[0:pos])


     
enter the emailsupport@campusx.in
support
In [ ]:	

# Count the frequency of a particular character in a provided string.
# Eg 'hello how are you' is the string, the frequency of h in this string is 2.

s = input('enter the email')
term = input('what would like to search for')

counter = 0
for i in s:
  if i == term:
    counter += 1

print('frequency',counter)

     
enter the emailhi how are you
what would like to search foro
frequency 2
In [ ]:	

# Write a program which can remove a particular character from a string.
s = input('enter the string')
term = input('what would like to remove')

result = ''

for i in s:
  if i != term:
    result = result + i

print(result)
     
enter the stringnitish
what would like to removei
ntsh
In [ ]:	

# Write a program that can check whether a given string is palindrome or not.
# abba
# malayalam

s = input('enter the string')
flag = True
for i in range(0,len(s)//2):
  if s[i] != s[len(s) - i -1]:
    flag = False
    print('Not a Palindrome')
    break

if flag:
  print('Palindrome')


     
enter the stringpython
Not a Palindrome
In [ ]:	

# Write a program to count the number of words in a string without split()

s = input('enter the string')
L = []
temp = ''
for i in s:

  if i != ' ':
    temp = temp + i
  else:
    L.append(temp)
    temp = ''

L.append(temp)
print(L)


     
enter the stringhi how are you
['hi', 'how', 'are', 'you']
In [ ]:	

# Write a python program to convert a string to title case without using the title()
s = input('enter the string')

L = []
for i in s.split():
  L.append(i[0].upper() + i[1:].lower())

print(" ".join(L))
     
enter the stringhi my namE iS NitiSh
Hi My Name Is Nitish
In [ ]:	

# Write a program that can convert an integer to string.

number = int(input('enter the number'))

digits = '0123456789'
result = ''
while number != 0:
  result = digits[number % 10] + result
  number = number//10

print(result)
print(type(result))
     
enter the number345
345
<class 'str'>
In [ ]:	


     



Lists


Open In Colab

1. Lists
What are Lists?
Lists Vs Arrays
Characterstics of a List
How to create a list
Access items from a List
Editing items in a List
Deleting items from a List
Operations on Lists
Functions on Lists
What are Lists
List is a data type where you can store multiple items under 1 name. More technically, lists act like dynamic arrays which means you can add more items on the fly.

image.png

Why Lists are required in programming?
Array Vs Lists
Fixed Vs Dynamic Size
Convenience -> Hetrogeneous
Speed of Execution
Memory
In [ ]:	

L = [1,2,3]

print(id(L))
print(id(L[0]))
print(id(L[1]))
print(id(L[2]))
print(id(1))
print(id(2))
print(id(3))
     
140163201133376
11126688
11126720
11126752
11126688
11126720
11126752
How lists are stored in memory
Characterstics of a List
Ordered
Changeble/Mutable
Hetrogeneous
Can have duplicates
are dynamic
can be nested
items can be accessed
can contain any kind of objects in python
In [ ]:	

L = [1,2,3,1]
L1 = [3,2,1]

L == L1
     
Out[ ]:	
False
Creating a List
In [ ]:	

# Empty
print([])
# 1D -> Homo
print([1,2,3,4,5])
# 2D
print([1,2,3,[4,5]])
# 3D
print([[[1,2],[3,4]],[[5,6],[7,8]]])
# Hetrogenous
print([1,True,5.6,5+6j,'Hello'])
# Using Type conversion
print(list('hello'))
     
[]
[1, 2, 3, 4, 5]
[1, 2, 3, [4, 5]]
[[[1, 2], [3, 4]], [[5, 6], [7, 8]]]
[1, True, 5.6, (5+6j), 'Hello']
['h', 'e', 'l', 'l', 'o']
Accessing Items from a List
In [ ]:	

# Indexing
L = [[[1,2],[3,4]],[[5,6],[7,8]]]
#positive
#print(L[0][0][1])

# Slicing
L = [1,2,3,4,5,6]

print(L[::-1])
     
[6, 5, 4, 3, 2, 1]
Adding Items to a List
In [ ]:	

# append
L = [1,2,3,4,5]
L.append(True)
print(L)
     
[1, 2, 3, 4, 5, True]
In [ ]:	

# extend
L = [1,2,3,4,5]
L.extend([6,7,8])
print(L)
     
[1, 2, 3, 4, 5, 6, 7, 8]
In [ ]:	

L = [1,2,3,4,5]
L.append([6,7,8])
print(L)
     
[1, 2, 3, 4, 5, [6, 7, 8]]
In [ ]:	

L = [1,2,3,4,5]
L.extend('delhi')
print(L)
     
[1, 2, 3, 4, 5, 'd', 'e', 'l', 'h', 'i']
In [ ]:	

# insert
L = [1,2,3,4,5]

L.insert(1,100)
print(L)
     
[1, 100, 2, 3, 4, 5]
Editing items in a List
In [ ]:	

L = [1,2,3,4,5]

# editing with indexing
L[-1] = 500

# editing with slicing
L[1:4] = [200,300,400]

print(L)
     
[1, 200, 300, 400, 500]
Deleting items from a List
In [ ]:	

# del
L = [1,2,3,4,5]

# indexing
del L[-1]

# slicing
del L[1:3]
print(L)
     
[1, 4]
In [ ]:	

# remove

L = [1,2,3,4,5]

L.remove(5)

print(L)

     
[1, 2, 3, 4]
In [ ]:	

# pop
L = [1,2,3,4,5]

L.pop()

print(L)
     
[1, 2, 3, 4]
In [ ]:	

# clear
L = [1,2,3,4,5]

L.clear()

print(L)
     
[]
Operations on Lists
Arithmetic
Membership
Loop
In [ ]:	

# Arithmetic (+ ,*)

L1 = [1,2,3,4]
L2 = [5,6,7,8]

# Concatenation/Merge
print(L1 + L2)
     
[1, 2, 3, 4, 5, 6, 7, 8]
In [ ]:	

print(L1*3)
     
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]
In [ ]:	

L1 = [1,2,3,4,5]
L2 = [1,2,3,4,[5,6]]

print(5 not in L1)
print([5,6] in L2)
     
False
True
In [ ]:	

# Loops
L1 = [1,2,3,4,5]
L2 = [1,2,3,4,[5,6]]
L3 = [[[1,2],[3,4]],[[5,6],[7,8]]]

for i in L3:
  print(i)
     
[[1, 2], [3, 4]]
[[5, 6], [7, 8]]
List Functions
In [ ]:	

# len/min/max/sorted
L = [2,1,5,7,0]

print(len(L))
print(min(L))
print(max(L))
print(sorted(L,reverse=True))
     
5
0
7
[7, 5, 2, 1, 0]
In [ ]:	

# count
L = [1,2,1,3,4,1,5]
L.count(5)
     
Out[ ]:	
1
In [ ]:	

# index
L = [1,2,1,3,4,1,5]
L.index(1)
     
Out[ ]:	
0
In [ ]:	

# reverse
L = [2,1,5,7,0]
# permanently reverses the list
L.reverse()
print(L)
     
[0, 7, 5, 1, 2]
In [ ]:	

# sort (vs sorted)
L = [2,1,5,7,0]
print(L)
print(sorted(L))
print(L)
L.sort()
print(L)
     
[2, 1, 5, 7, 0]
[0, 1, 2, 5, 7]
[2, 1, 5, 7, 0]
[0, 1, 2, 5, 7]
In [ ]:	

# copy -> shallow
L = [2,1,5,7,0]
print(L)
print(id(L))
L1 = L.copy()
print(L1)
print(id(L1))
     
[2, 1, 5, 7, 0]
140163201056112
[2, 1, 5, 7, 0]
140163201128800
List Comprehension
List Comprehension provides a concise way of creating lists.

newlist = [expression for item in iterable if condition == True]image.png

Advantages of List Comprehension

More time-efficient and space-efficient than loops.
Require fewer lines of code.
Transforms iterative statement into a formula.
In [ ]:	

# Add 1 to 10 numbers to a list
L = []

for i in range(1,11):
  L.append(i)

print(L)
     
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
In [ ]:	

L = [i for i in range(1,11)]
print(L)
     
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
In [ ]:	

# scalar multiplication on a vector
v = [2,3,4]
s = -3
# [-6,-9,-12]

[s*i for i in v]
     
Out[ ]:	
[-6, -9, -12]
In [ ]:	

# Add squares
L = [1,2,3,4,5]

[i**2 for i in L]

     
Out[ ]:	
[1, 4, 9, 16, 25]
In [ ]:	

# Print all numbers divisible by 5 in the range of 1 to 50

[i for i in range(1,51) if i%5 == 0]
     
Out[ ]:	
[5, 10, 15, 20, 25, 30, 35, 40, 45, 50]
In [ ]:	

# find languages which start with letter p
languages = ['java','python','php','c','javascript']

[language for language in languages if language.startswith('p')]
     
Out[ ]:	
['python', 'php']
In [ ]:	

# Nested if with List Comprehension
basket = ['apple','guava','cherry','banana']
my_fruits = ['apple','kiwi','grapes','banana']

# add new list from my_fruits and items if the fruit exists in basket and also starts with 'a'

[fruit for fruit in my_fruits if fruit in basket if fruit.startswith('a')]
     
Out[ ]:	
['apple']
In [ ]:	

# Print a (3,3) matrix using list comprehension -> Nested List comprehension
[[i*j for i in range(1,4)] for j in range(1,4)]
     
Out[ ]:	
[[1, 2, 3], [2, 4, 6], [3, 6, 9]]
In [ ]:	

# cartesian products -> List comprehension on 2 lists together
L1 = [1,2,3,4]
L2 = [5,6,7,8]

[i*j for i in L1 for j in L2]
     
Out[ ]:	
[5, 6, 7, 8, 10, 12, 14, 16, 15, 18, 21, 24, 20, 24, 28, 32]
2 ways to traverse a list
itemwise
indexwise
In [ ]:	

# itemwise
L = [1,2,3,4]

for i in L:
  print(i)
     
1
2
3
4
In [ ]:	

# indexwise
L = [1,2,3,4]

for i in range(0,len(L)):
  print(L[i])

     
1
2
3
4
Zip
The zip() function returns a zip object, which is an iterator of tuples where the first item in each passed iterator is paired together, and then the second item in each passed iterator are paired together.

If the passed iterators have different lengths, the iterator with the least items decides the length of the new iterator.

In [ ]:	

# Write a program to add items of 2 lists indexwise

L1 = [1,2,3,4]
L2 = [-1,-2,-3,-4]

list(zip(L1,L2))

[i+j for i,j in zip(L1,L2)]
     
Out[ ]:	
[0, 0, 0, 0]
In [ ]:	

L = [1,2,print,type,input]

print(L)
     
[1, 2, <built-in function print>, <class 'type'>, <bound method Kernel.raw_input of <google.colab._kernel.Kernel object at 0x7f7a67452a90>>]
Disadvantages of Python Lists
Slow
Risky usage
eats up more memory
In [ ]:	

a = [1,2,3]
b = a.copy()

print(a)
print(b)

a.append(4)
print(a)
print(b)

# lists are mutable
     
[1, 2, 3]
[1, 2, 3]
[1, 2, 3, 4]
[1, 2, 3]
List Programs
In [ ]:	

# Create 2 lists from a given list where
# 1st list will contain all the odd numbers from the original list and
# the 2nd one will contain all the even numbers

L = [1,2,3,4,5,6]
     
In [ ]:	

# How to take list as input from user
     
In [ ]:	

# Write a program to merge 2 list without using the + operator
L1 = [1,2,3,4]
L2 = [5,6,7,8]

     
In [ ]:	

# Write a program to replace an item with a different item if found in the list
L = [1,2,3,4,5,3]
# replace 3 with 300
     
In [ ]:	

# Write a program that can convert a 2D list to 1D list
     
In [ ]:	

# Write a program to remove duplicate items from a list

L = [1,2,1,2,3,4,5,3,4]
     
In [ ]:	

# Write a program to check if a list is in ascending order or not
     


TUPLES




In [ ]:	


     
How to create tuples
In [ ]:	

# when we want to creare a tuple then we first of alluse small bracket and value is showing on commas
t=(1)
print(type(t)) # this is not a tuple but print(type(t,))
     
<class 'int'>
In [ ]:	

#Tuple program
t1=('Ravi Kumar Singh',)
print(type(t1))
     
<class 'tuple'>
In [ ]:	


     
In [ ]:	

#Homogenious tuple
t=(1,2,3,4,5,6)
#print(type(t))
print(t)

# hetrogenious
t=(1,2,4,9,True,[1,2,3])
print(t)

# Two dimensional Tuple
t=(1,2,3,4,(5,6,7))
#print(type(t))
print(t)

# Using type conversion
t=tuple('Ravi kumar singh')
print(t)
# slicing
t=(1,2,3,4,5)
t[-1:-5:-1]

     
(1, 2, 3, 4, 5, 6)
(1, 2, 4, 9, True, [1, 2, 3])
(1, 2, 3, 4, (5, 6, 7))
('R', 'a', 'v', 'i', ' ', 'k', 'u', 'm', 'a', 'r', ' ', 's', 'i', 'n', 'g', 'h')
Out[ ]:	
(5, 4, 3, 2)
Operation on tuple
In [ ]:	

# There are three type of operation under the tuple
# + operator
Ravi_kumar=('9517350497')
Kamal_singh=(',5867483827')
print(Ravi_kumar + Kamal_singh )
# * operator
print(Ravi_kumar*5)
# iteration
for i in Ravi_kumar:
  print(i)
# sum function
t1=(1,2,3,4,5,5,6,4)
sum(t1)
     
9517350497,5867483827
95173504979517350497951735049795173504979517350497
9
5
1
7
3
5
0
4
9
7
Out[ ]:	
30
In [ ]:	

#when we want to add some value in tuple then
a=(1,2,3)
b=a
a=a+(4,)
print(a)
print(b)
     
(1, 2, 3, 4)
(1, 2, 3)
Accessing items using indexing and slicing
In [ ]:	

#indexing are use to access any element
t3=(1,2,3,4,5,6,7,8)
print(t3)
print(t3[0])
print(t3[1:5])
t5=(1,2,3,4,5,(19,8,9))
t5[-1][2]
     
(1, 2, 3, 4, 5, 6, 7, 8)
1
(2, 3, 4, 5)
Out[ ]:	
9
Tuple unpacking is a special syntax.
In [ ]:	

#tupple unpacking me both side values equal hone cheia.
a,b,c=(1,2,3)
print(a,b,c)
     
1 2 3
In [ ]:	

a,b=(1,2,3)
print(a,b,c) # output is error through because values are not equal level.

     
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
<ipython-input-58-ad0d58a69297> in <cell line: 1>()
----> 1 a,b=(1,2,3)
      2 print(a,b,c) # output is error through because values are not equal level.

ValueError: too many values to unpack (expected 2)
In [ ]:	

# Swapping program under the python
a=1
b=2
a,b=b,a
print(a,b)
     
2 1
In [ ]:	

a,b,*others=(1,2,3,4,5,6,7,8)
print(a,b)
print(others)
     
1 2
[3, 4, 5, 6, 7, 8]
In [ ]:	

#zipping tuples
a=(1,2,3,4)
b=(3,4,5,6)
p=tuple(zip(a,b))
print(p)
     
((1, 3), (2, 4), (3, 5), (4, 6))
Creating a set
In [ ]:	

# Empty set
s=set() # empty set ko hamesa conversion ke jese krke solve kiya jata hai.
print(s)
p=type(s)
print(p)

# 1D and 2D sets
ravi_singh={1,2,3,4,5}
print(ravi_singh)
# In python 2 D set are not possible

# muitable and unmutable
s3={1,'Hello Ravi Kumar Singh',2.45,5,2,True,(6,7,8,9)}
print(s3)
#using type conversion
ravi=set([2,3,4])
print(ravi)


#add
s={2,3,4}
#s.add(5)
#print(s)
#update
s.update([5,6,7])
print(s)

     
set()
<class 'set'>
{1, 2, 3, 4, 5}
{1, 2.45, 2, 5, (6, 7, 8, 9), 'Hello Ravi Kumar Singh'}
{2, 3, 4}
{2, 3, 4, 5, 6, 7}
Deleteing process in set
In [ ]:	

#there are many process which we delete the item under the set.
# del
s={1,2,3,4,5}
#print(s)
#del s[0] not possible
#discard  ek ek values ko discard krta hai
s.discard(5)
print(s)

#remove me bhi jesko man kre remove kr skte hai
# it is a best for data science.
s.remove(2)
print(s)

#pop set ke under se kesi bhi value ko delete kr skta hai
s.pop()
print(s)

# Clear sabhi set ko khali kr deta hai
s.clear()
print(s)



     
{1, 2, 3, 4}
{1, 3, 4}
{3, 4}
set()
Operations on set
In [ ]:	

#Union operation(|)
ravi_kumar={1,2,3,4,5}
singh={4,5,6,7,8}
ravi_kumar | singh

#intersection(&) it find the between the values
ravi_kumar & singh # output is 4,5

#Differance(-) ravi_kumar ka wo value jo  singh me na ho.
ravi_kumar - singh #output is 1,2,3
     
Out[ ]:	
{4, 5}
In [ ]:	

# len/sum/min/max/sorted
set={1,3,4,5,4,3}
len(set)
sum(set)
min(set)
max(set)
sorted(set)
sorted(set,reverse=True)
     
Out[ ]:	
[5, 4, 3, 1]
In [ ]:	

#union/update
s1={3,4,5,6}
s2={5,3,7,8}
#s1.union(s2)
s1 | s2
#print(s1)
# for update
s1.update(s2) # s2 ki valure s1 me jakr s1 ko update kr de rhi hai aur s2 me koi changing nhi ho rha hai
print(s1)
print(s2)
     
{3, 4, 5, 6, 7, 8}
{8, 3, 5, 7}
Frozenset
Frozen set is just an immutable version of python set object

In [ ]:	

#frozen set me koi naya item na he add aur na he delate ho skta hai jo bn gya o hi rheta hai
#creating the frogenset
fs=frozenset([1,2,3])
fs
     
Out[ ]:	
frozenset({1, 2, 3})
In [ ]:	

# union operation under the frozenset.
ravi1=frozenset([1,2,3,4,5,6])
ravi2=frozenset([7,8,9,10,11,12])
ravi1|ravi2
     
Out[ ]:	
frozenset({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12})
In [ ]:	

# 2D frozenset

fs1=frozenset([1,2,3,frozenset([4,5,6])])
print('The frozenset is =',fs1)
     
The frozenset is = frozenset({1, 2, 3, frozenset({4, 5, 6})})
Set Comphernsion
In [ ]:	

#print the number 1 to 10 using set comphersion
{i for i in range(1,11)}
     
Out[ ]:	
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}
Disconary
Most important topic for data science

In [ ]:	

# Empty disconary
d={}
n=type(d)
print(d)
     
{}
In [ ]:	

# Empty disconary
d={}
d

#1D disconary
# Disconary me values ko keyaur pair ke form me rekhate hai.
d1={'Name':'Ravi Kumar Singh','roll_no':2104310100067,'Gender':'Male'}
print(d1)

# 2 D  Disconary
student={
        'name':'Ravi',
        'college':'aktu',
        'sem':'6th',
        'Subject':{
            'Maths': 50,
            'DSA':80,
            'electronics':65,
        }

}
print(student)
     
{'Name': 'Ravi Kumar Singh', 'roll_no': 2104310100067, 'Gender': 'Male'}
{'name': 'Ravi', 'college': 'aktu', 'sem': '6th', 'Subject': {'Maths': 50, 'DSA': 80, 'electronics': 65}}
In [ ]:	

# 2 D disconary pratics
ravi={'Name':'Ravi Kumar Singh',
      'Roll no':2104310100067,
      'Age in years': 21,
       'Gender':'Male',
      'Student':{
          'Girls':{'prema':'pass','susma':'fail'},
          'boys':{'Kapil':'pass','manoj':'pass','karan':'fail'}
      }

}
print(ravi)
     
{'Name': 'Ravi Kumar Singh', 'Roll no': 2104310100067, 'Age in years': 21, 'Gender': 'Male', 'Student': {'Girls': {'prema': 'pass', 'susma': 'fail'}, 'boys': {'Kapil': 'pass', 'manoj': 'pass', 'karan': 'fail'}}}
Accessing items
In [ ]:	

# Disconary me kesi value ko access krne ke liye uske key ko pass krte hai
d2={'name':'Rahul','Age':35}
d2['name']
     
Out[ ]:	
'Rahul'
In [ ]:	

d2={'name':'Rahul','Age':35}
d2['Age']
     
Out[ ]:	
35
In [ ]:	

Ravi_kumar={'name':'Rahul','Age':35,'Roll no':2104310100067}
Ravi_kumar['Roll no'] # key pass krne pr automatic access kr leta hai.
# OR ES NECHE WALE SE BHI ACCESS KIYA JA SKTA HAI

Ravi_kumar.get('Roll no')
     
Out[ ]:	
2104310100067
In [ ]:	

# ADDING NEW VALUE IN DISCONARY
Ravi_kumar={'name':'Rahul','Age':35,'Roll no':2104310100067}
Ravi_kumar['Gender']='male'
print(Ravi_kumar)

     
{'name': 'Rahul', 'Age': 35, 'Roll no': 2104310100067, 'Gender': 'male'}
In [ ]:	

dis={'name':'Rahul','Age':35,'Roll no':2104310100067}
dis['Gender']='male'
dis['Address']='Laxmipur Dhus ,Hata ,Kushinagar'
print(dis)
     
{'name': 'Rahul', 'Age': 35, 'Roll no': 2104310100067, 'Gender': 'male', 'Address': 'Laxmipur Dhus ,Hata ,Kushinagar'}
Remove Keyvalue pair
In [ ]:	

d1={'name': 'Rahul', 'Age': 35, 'Roll no': 2104310100067, 'Gender': 'male', 'Address': 'Laxmipur Dhus ,Hata ,Kushinagar'}
#pop
#d1.pop('Age')
#print(d1)
#popitem
d1.popitem()
d1.popitem()
print(d1)
     
{'name': 'Rahul', 'Roll no': 2104310100067, 'Gender': 'male', 'Address': 'Laxmipur Dhus ,Hata ,Kushinagar'}
{'name': 'Rahul', 'Roll no': 2104310100067}
Discoanry Operator
In [ ]:	

# There are two types of Disconary operato
#Membership
p={'name': 'Rahul', 'Roll no': 2104310100067}
'name' in p
# yah key ko cheak krta hai ki kya wo key hai ya nhi
     
Out[ ]:	
True
Disconary fumction
In [ ]:	

#len/sorted
p={'name': 'Rahul', 'Roll no': 2104310100067}
#len(p)
#print(p)

#sorted
sorted(p,reverse=True)
     
Out[ ]:	
['name', 'Roll no']
items ,key ,values
In [ ]:	

#items
p={'name': 'Rahul', 'Roll no': 2104310100067}
#print(p.items())

#print(p.keys()) # yah key ko bateta hai

print(p.values())# yah key me present value ko bateta hai.

     
dict_values(['Rahul', 2104310100067])
Update
In [ ]:	

d={1:2,3:4,4:5}
d1={3:5,7:8,4:19}
d.update(d1)# d1 ki value d me jake update ho ja rhi hai
print(d)
     
{1: 2, 3: 5, 4: 19, 7: 8}
Disconary comprehension
In [ ]:	

#print first ten numbers and their squares
{i:i**2 for i in range(1,11)}

# using zip function
days=["sunday","monday","Tuesday","Wednesday","Thursday","Friday","saturday"]
temp_c=[30.5,32.6,31.8,89.5,45,56.6,37.7]
{i:j for (i,j)in zip(days,temp_c)}
     
Out[ ]:	
{'sunday': 30.5,
 'monday': 32.6,
 'Tuesday': 31.8,
 'Wednesday': 89.5,
 'Thursday': 45,
 'Friday': 56.6,
 'saturday': 37.7}
In [ ]:	

# Nested comphersion
{i:{j:i*j for j in range(1,11)} for i in range (2,5)}
     
Out[ ]:	
{2: {1: 2, 2: 4, 3: 6, 4: 8, 5: 10, 6: 12, 7: 14, 8: 16, 9: 18, 10: 20},
 3: {1: 3, 2: 6, 3: 9, 4: 12, 5: 15, 6: 18, 7: 21, 8: 24, 9: 27, 10: 30},
 4: {1: 4, 2: 8, 3: 12, 4: 16, 5: 20, 6: 24, 7: 28, 8: 32, 9: 36, 10: 40}}













